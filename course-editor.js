// course-editor.js
export class CourseEditor {
    constructor(containerId) {
        this.editingId = null;
        this.container = document.getElementById(containerId);
        if (!this.container) throw new Error('CourseEditor: container not found');
        this.courseData = this.getDefaultCourse();
        this.init();
    }

    getDefaultCourse() {
        return {
            metadata: {
                title: '–ù–æ–≤—ã–π –∫—É—Ä—Å',
                validation_prompt: '–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ–º–µ –∫—É—Ä—Å–∞. –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
            },
            modules: [{
                id: 'm1',
                title: '–ú–æ–¥—É–ª—å 1',
                description: '–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è',
                order: 1
            }],
            exercises: [{
                id: 'e1',
                module_id: 'm1',
                prompt: '–°–∏—Ç—É–∞—Ü–∏—è...',
                expected_answer: '–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...',
                feedback_on_error: '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ...',
                difficulty: 2
            }]
        };
    }

    init() {
        this.container.innerHTML = `
            <div class="editor-ai" id="editorAiSection"></div>
            <div class="editor-form" id="editorForm"></div>
            <div class="editor-actions-bottom" id="editorActionsBottom"></div>
        `;
        this.renderForm();
        this.renderAISection();
        this.renderActionsBottom();
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
        const errorEl = document.createElement('div');
        errorEl.className = 'editor-error';
        errorEl.id = 'editorError';
        this.container.appendChild(errorEl);

        this.bindFormEvents();
    }

    renderForm() {
        const form = this.container.querySelector('#editorForm');
        form.innerHTML = `
            <h2 class="editor-title">–†–µ–¥–∞–∫—Ç–æ—Ä –∫—É—Ä—Å–∞</h2>
            <div class="floating-input">
                <input type="text" id="courseTitle" class="editor-input required" placeholder=" " value="${this.escape(this.courseData.metadata.title)}" data-required>
                <label for="courseTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ <span class="required-star">*</span></label>
            </div>
            <div class="floating-input">
                <textarea id="validationPrompt" class="editor-textarea required" rows="3" placeholder=" ">${this.escape(this.courseData.metadata.validation_prompt)}</textarea>
                <label for="validationPrompt">–ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò <span class="required-star">*</span></label>
            </div>
            
            <div id="modulesContainer"></div>
            <button class="editor-btn primary" id="addModule">+ –ú–æ–¥—É–ª—å</button>
            <button class="editor-btn" id="addModuleWithAI" hidden="hidden">+ –ú–æ–¥—É–ª—å ‚ú®</button>
        `;
        this.renderModules();
    }

    renderModules() {
        const container = this.container.querySelector('#modulesContainer');
        container.innerHTML = '';
        this.courseData.modules.forEach((module) => {
            const exercises = this.courseData.exercises.filter(e => e.module_id === module.id);
            const moduleEl = document.createElement('div');
            moduleEl.className = 'module-card';
            moduleEl.draggable = true;
            moduleEl.dataset.moduleId = module.id;
            moduleEl.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', module.id);
            });
            moduleEl.addEventListener('dragover', (e) => e.preventDefault());
            moduleEl.addEventListener('drop', (e) => {
                e.preventDefault();
                const draggedId = e.dataTransfer.getData('text/plain');
                this.reorderModules(draggedId, module.id);
            });
            moduleEl.innerHTML = `
                <button class="remove-btn" data-id="${module.id}" title="–£–¥–∞–ª–∏—Ç—å">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
                <div class="floating-input">
                    <input type="text" class="module-title-input editor-input" placeholder=" " value="${this.escape(module.title)}" data-id="${module.id}">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è</label>
                </div>
                <div class="floating-input">
                    <textarea class="module-desc-input editor-textarea" placeholder=" " data-id="${module.id}">${this.escape(module.description)}</textarea>
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è</label>
                </div>
                <div class="exercises-list" id="exercises_${module.id}"></div>
                <button class="editor-btn" data-module-id="${module.id}">+ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</button>
                <button class="editor-btn" data-module-id="${module.id}" id="addExerciseWithAI_${module.id}" hidden="hidden">+ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚ú®</button>

            `;
            container.appendChild(moduleEl);
            this.renderExercises(module.id, exercises);
        });
    }

    renderExercises(moduleId, exercises) {
        const list = this.container.querySelector(`#exercises_${moduleId}`);
        list.innerHTML = '';
        exercises.forEach(ex => {
            const exEl = document.createElement('div');
            exEl.className = 'exercise-card';
            exEl.innerHTML = `
                <button class="remove-btn ex-remove" data-id="${ex.id}" title="–£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
                <div class="floating-input">
                    <textarea class="ex-prompt editor-textarea" placeholder=" " data-id="${ex.id}">${this.escape(ex.prompt)}</textarea>
                    <label>–°–∏—Ç—É–∞—Ü–∏—è</label>
                </div>
                <div class="floating-input">
                    <textarea class="ex-expected editor-textarea" placeholder=" " data-id="${ex.id}">${this.escape(ex.expected_answer)}</textarea>
                    <label>–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</label>
                </div>
                <div class="floating-input">
                    <textarea class="ex-feedback editor-textarea" placeholder=" " data-id="${ex.id}">${this.escape(ex.feedback_on_error)}</textarea>
                    <label>–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ</label>
                </div>
                <div class="floating-input floating-input--select" style="flex:1;">
                    <select class="editor-select" data-id="${ex.id}">
                        <option value="1" ${ex.difficulty === 1 ? 'selected' : ''}>1 ‚Äî –ü—Ä–æ—Å—Ç–æ–µ</option>
                        <option value="2" ${ex.difficulty === 2 ? 'selected' : ''}>2 ‚Äî –°—Ä–µ–¥–Ω–µ–µ</option>
                        <option value="3" ${ex.difficulty === 3 ? 'selected' : ''}>3 ‚Äî –°–ª–æ–∂–Ω–æ–µ</option>
                    </select>
                    <label>–°–ª–æ–∂–Ω–æ—Å—Ç—å</label>
                </div>
            `;
            list.appendChild(exEl);
        });
    }

    renderAISection() {
        this.container.querySelector('#editorAiSection').innerHTML = `
            
                <h3>‚ú® –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å —Å –ò–ò</h3>
                <div class="floating-input">
                    <textarea id="aiPrompt" class="editor-textarea" placeholder=" ">–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, —Ü–µ–ª—å, –∞—É–¥–∏—Ç–æ—Ä–∏—é...</textarea>
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –ò–ò</label>
                </div>
                <button class="editor-btn primary" id="generateWithAI">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
            
        `;
    }

    renderActionsBottom() {
        this.container.querySelector('#editorActionsBottom').innerHTML = `
            <div class="editor-actions-bottom">
<button class="editor-btn" id="importJson">üì• –ò–º–ø–æ—Ä—Ç</button>
<button class="editor-btn primary" id="exportJson">üì§ –≠–∫—Å–ø–æ—Ä—Ç</button>
                <button class="editor-btn primary" id="launchCourse">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫—É—Ä—Å</button>
            </div>
        `;
    }

    escape(str) {
        return str.replace(/</g, '<').replace(/>/g, '>');
    }

    bindFormEvents() {
        // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫!) ===
        this.container.addEventListener('input', (e) => {
            const { target } = e;
            if (target.classList.contains('module-title-input')) {
                const mod = this.courseData.modules.find(m => m.id === target.dataset.id);
                if (mod) mod.title = target.value;
            } else if (target.classList.contains('module-desc-input')) {
                const mod = this.courseData.modules.find(m => m.id === target.dataset.id);
                if (mod) mod.description = target.value;
            } else if (target.classList.contains('ex-prompt')) {
                const ex = this.courseData.exercises.find(e => e.id === target.dataset.id);
                if (ex) ex.prompt = target.value;
            } else if (target.classList.contains('ex-expected')) {
                const ex = this.courseData.exercises.find(e => e.id === target.dataset.id);
                if (ex) ex.expected_answer = target.value;
            } else if (target.classList.contains('ex-feedback')) {
                const ex = this.courseData.exercises.find(e => e.id === target.dataset.id);
                if (ex) ex.feedback_on_error = target.value;
            } else if (target.id === 'courseTitle') {
                this.courseData.metadata.title = target.value;
            } else if (target.id === 'validationPrompt') {
                this.courseData.metadata.validation_prompt = target.value;
            }
            // ‚ö†Ô∏è –£–ë–†–ê–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ input!
        });

        // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–õ–ò–ö–û–í (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –ò–ò) ===
        this.container.addEventListener('click', async (e) => {
            if (e.target.id === 'addModule') {
                const id = `m${Date.now()}`;
                this.courseData.modules.push({
                    id,
                    title: `–ú–æ–¥—É–ª—å ${this.courseData.modules.length + 1}`,
                    description: '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                    order: this.courseData.modules.length + 1
                });
                this.renderModules();
            } else if (e.target.textContent === '+ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ') {
                const moduleId = e.target.dataset.moduleId;
                const id = `e${Date.now()}`;
                this.courseData.exercises.push({
                    id,
                    module_id: moduleId,
                    prompt: '–ù–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è...',
                    expected_answer: '–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...',
                    feedback_on_error: '–ü–æ–¥—Å–∫–∞–∑–∫–∞...',
                    difficulty: 2
                });
                this.renderModules();
            } else if (e.target.classList.contains('remove-btn')) {
                if (confirm('–£–¥–∞–ª–∏—Ç—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
                    const id = e.target.dataset.id;
                    if (e.target.classList.contains('ex-remove')) {
                        this.courseData.exercises = this.courseData.exercises.filter(e => e.id !== id);
                    } else {
                        this.courseData.modules = this.courseData.modules.filter(m => m.id !== id);
                        this.courseData.exercises = this.courseData.exercises.filter(e => e.module_id !== id);
                    }
                    this.renderModules();
                }
            }
            // ‚úÖ –ö–Ω–æ–ø–∫–∏ –ò–ò ‚Äî –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å, —Å async/await
            else if (e.target.id === 'addModuleWithAI') {
                await this.addModuleWithAI();
            } else if (e.target.id.startsWith('addExerciseWithAI_')) {
                const moduleId = e.target.dataset.moduleId;
                await this.addExerciseWithAI(moduleId);
            }
        });

        // === –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—ç–∫—Å–ø–æ—Ä—Ç, –∏–º–ø–æ—Ä—Ç, –∑–∞–ø—É—Å–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è) ===
        this.container.querySelector('#exportJson').addEventListener('click', () => {
            const blob = new Blob([JSON.stringify(this.courseData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${this.courseData.metadata.title.replace(/\s+/g, '_')}.json`;
            a.click();
            URL.revokeObjectURL(url);
        });

        this.container.querySelector('#importJson').addEventListener('click', () => {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = (ev) => {
                const file = ev.target.files[0];
                if (!file) return;
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        this.courseData = JSON.parse(e.target.result);
                        this.renderForm();
                    } catch (err) {
                        alert('–ù–µ–≤–µ—Ä–Ω—ã–π JSON');
                    }
                };
                reader.readAsText(file);
            };
            input.click();
        });

        // –≠–∫—Å–ø–æ—Ä—Ç
        this.container.querySelector('#exportJson').addEventListener('click', () => {
            const blob = new Blob([JSON.stringify(this.courseData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${this.courseData.metadata.title.replace(/\s+/g, '_')}.json`;
            a.click();
            URL.revokeObjectURL(url);
        });

        // –ò–º–ø–æ—Ä—Ç
        this.container.querySelector('#importJson').addEventListener('click', () => {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = (ev) => {
                const file = ev.target.files[0];
                if (!file) return;
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        this.courseData = JSON.parse(e.target.result);
                        this.renderForm();
                    } catch (err) {
                        alert('–ù–µ–≤–µ—Ä–Ω—ã–π JSON');
                    }
                };
                reader.readAsText(file);
            };
            input.click();
        });

        // –ó–∞–ø—É—Å–∫
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞
        this.container.querySelector('#launchCourse').removeEventListener('click', () => {});
        this.container.querySelector('#launchCourse').addEventListener('click', () => {
            if (this.validateForm()) {
                this.onLaunch?.(this.courseData, this.editingId);
            }
        });

        this.container.querySelector('#generateWithAI').addEventListener('click', async () => {
            await this.generateWithAI();
        });
    }

    reorderModules(draggedId, targetId) {
        if (draggedId === targetId) return;
        const dragged = this.courseData.modules.find(m => m.id === draggedId);
        const target = this.courseData.modules.find(m => m.id === targetId);
        if (!dragged || !target) return;
        // –û–±–º–µ–Ω order
        [dragged.order, target.order] = [target.order, dragged.order];
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.courseData.modules.sort((a, b) => a.order - b.order);
        this.renderModules();
    }

    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω–æ ‚Äî –º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ)
    reorderExercises(moduleId, fromIndex, toIndex) {
        const exercises = this.courseData.exercises.filter(e => e.module_id === moduleId);
        if (fromIndex < 0 || toIndex < 0 || fromIndex >= exercises.length || toIndex >= exercises.length) return;
        const [moved] = exercises.splice(fromIndex, 1);
        exercises.splice(toIndex, 0, moved);
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        this.courseData.exercises = [
            ...this.courseData.exercises.filter(e => e.module_id !== moduleId),
            ...exercises
        ];
        this.renderModules();
    }

    validateForm() {
        let isValid = true;
        const errorMessages = [];

        // –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫
        this.container.querySelectorAll('.floating-input').forEach(el => {
            el.classList.remove('invalid');
        });
        this.container.querySelector('#editorError').textContent = '';

        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        const title = this.courseData.metadata.title?.trim();
        if (!title) {
            isValid = false;
            this.markInvalid('courseTitle');
            errorMessages.push('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞');
        }

        const prompt = this.courseData.metadata.validation_prompt?.trim();
        if (!prompt) {
            isValid = false;
            this.markInvalid('validationPrompt');
            errorMessages.push('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
        if (this.courseData.modules.length === 0) {
            isValid = false;
            errorMessages.push('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å');
        } else {
            this.courseData.modules.forEach((mod, idx) => {
                if (!mod.title?.trim()) {
                    isValid = false;
                    errorMessages.push(`–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è ${idx + 1}`);
                }
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        if (this.courseData.exercises.length === 0) {
            isValid = false;
            errorMessages.push('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ');
        } else {
            this.courseData.exercises.forEach((ex, idx) => {
                if (!ex.prompt?.trim() || !ex.expected_answer?.trim()) {
                    isValid = false;
                    errorMessages.push(`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ${idx + 1}`);
                }
            });
        }

        // –ü–æ–∫–∞–∑ –æ—à–∏–±–æ–∫
        if (!isValid) {
            this.container.querySelector('#editorError').textContent = errorMessages.join('\n');
        }

        return isValid;
    }

    markInvalid(fieldId) {
        const input = this.container.querySelector(`#${fieldId}`);
        if (input) {
            const floatingInput = input.closest('.floating-input');
            if (floatingInput) {
                floatingInput.classList.add('invalid');
            }
        }
    }



    loadFromFile(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                this.courseData = JSON.parse(e.target.result);
                this.renderForm();
            } catch (err) {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–π JSON');
            }
        };
        reader.readAsText(file);
    }

    show() {
        this.container.style.display = 'flex';
    }

    hide() {
        this.container.style.display = 'none';
    }

    setOnLaunch(callback) {
        this.onLaunch = callback;
    }

    loadCourseData(data, id = null) {
        this.courseData = data;
        this.editingId = id; // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        this.renderForm();
    }

    async generateWithAI() {
        const aiPromptEl = this.container.querySelector('#aiPrompt');
        const userPrompt = aiPromptEl.value.trim();
        if (!userPrompt) {
            alert('–û–ø–∏—à–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ò–ò');
            return;
        }

        const btn = this.container.querySelector('#generateWithAI');
        const originalText = btn.textContent;
        let timeLeft = 120; // 120 —Å–µ–∫—É–Ω–¥
        btn.disabled = true;
        btn.innerHTML = `–î—É–º–∞—é... (${timeLeft}s)`;

        const timer = setInterval(() => {
            timeLeft--;
            btn.innerHTML = `–î—É–º–∞—é... (${timeLeft}s)`;
            if (timeLeft <= 0) clearInterval(timer);
        }, 1000);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            if (typeof window.createLLMClient === 'undefined') {
                throw new Error('createLLMClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            // –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
            const llmClient = window.createLLMClient();

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            const systemInstructions = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤ –¥–ª—è MindGym.
–°–ª–µ–¥—É–π —Å—Ç—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∏—á–∫–µ:

${this.getGuide()}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ MindGym, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ markdown, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ/–ø–æ—Å–ª–µ.
`.trim();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            const signal = AbortSignal.timeout(120000);
            const rawResponse = await llmClient.generateCourse(userPrompt, systemInstructions, signal);

            // –û—á–∏—â–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º
            const cleanJson = rawResponse
                .replace(/^```json\s*/i, '')
                .replace(/```$/, '')
                .trim();

            const newCourse = JSON.parse(cleanJson);
            this.courseData = newCourse;
            this.renderForm();
            this.container.querySelector('#editorError').textContent = '‚úÖ –ö—É—Ä—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!';

        } catch (err) {
            console.error('AI Generation error:', err);
            this.container.querySelector('#editorError').textContent =
                '–û—à–∏–±–∫–∞: ' + (err.message || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å');
        } finally {
            btn.disabled = false;
            btn.textContent = originalText;

            clearInterval(timer);
        }
    }

    async addModuleWithAI() {
        await this._generateAndInsert('module', null);
    }

    async addExerciseWithAI(moduleId) {
        await this._generateAndInsert('exercise', moduleId);
    }

    async _generateAndInsert(type, moduleId = null) {
        const btn = event?.currentTarget || document.activeElement;
        if (!btn) return;

        const originalText = btn.innerHTML;
        let timeLeft = 120; // 120 —Å–µ–∫—É–Ω–¥
        btn.disabled = true;
        btn.innerHTML = `–î—É–º–∞—é... (${timeLeft}s)`;

        const timer = setInterval(() => {
            timeLeft--;
            btn.innerHTML = `–î—É–º–∞—é... (${timeLeft}s)`;
            if (timeLeft <= 0) clearInterval(timer);
        }, 1000);

        try {
            if (typeof window.createLLMClient === 'undefined') {
                throw new Error('LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            const llmClient = window.createLLMClient();

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            let systemInstructions, userPrompt;
            if (type === 'module') {
                systemInstructions = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫—É—Ä—Å–æ–≤ –¥–ª—è MindGym.
–°–æ–∑–¥–∞–π –û–î–ò–ù –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "id": "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Å—Ç—Ä–æ–∫–æ–≤—ã–π_id",
  "title": "...",
  "description": "...",
  "order": ${this.courseData.modules.length + 1}
}
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
`;
                userPrompt = `–ö—É—Ä—Å: "${this.courseData.metadata.title}". –î–æ–±–∞–≤—å –º–æ–¥—É–ª—å –Ω–∞ —Ç–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫—É—Ä—Å–æ–º.`;
            } else {
                const module = this.courseData.modules.find(m => m.id === moduleId);
                systemInstructions = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫—É—Ä—Å–æ–≤ –¥–ª—è MindGym.
–°–æ–∑–¥–∞–π –û–î–ù–û –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "id": "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Å—Ç—Ä–æ–∫–æ–≤—ã–π_id",
  "module_id": "${moduleId}",
  "prompt": "...",
  "expected_answer": "...",
  "feedback_on_error": "...",
  "difficulty": 2
}
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
`;
                userPrompt = `–ú–æ–¥—É–ª—å: "${module.title}". –î–æ–±–∞–≤—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ –º–æ–¥—É–ª—è.`;
            }

            const signal = AbortSignal.timeout(1200000); // 120 —Å–µ–∫
            const raw = await llmClient.generateCourse(userPrompt, systemInstructions, signal);
            const clean = raw.replace(/^```json\s*/i, '').replace(/```$/, '').trim();
            const newItem = JSON.parse(clean);

            if (type === 'module') {
                this.courseData.modules.push(newItem);
            } else {
                this.courseData.exercises.push(newItem);
            }
            this.renderForm();
            this.container.querySelector('#editorError').textContent = `‚úÖ ${type === 'module' ? '–ú–æ–¥—É–ª—å' : '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'} –¥–æ–±–∞–≤–ª–µ–Ω–æ!`;

        } catch (err) {
            console.error(err);
            this.container.querySelector('#editorError').textContent = `–û—à–∏–±–∫–∞: ${err.message}`;
        } finally {
            clearInterval(timer);
            btn.disabled = false;
            btn.innerHTML = originalText;
        }
    }

    getGuide() {
        return `
## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞
–ö—É—Ä—Å ‚Äî —ç—Ç–æ JSON —Å –ø–æ–ª—è–º–∏: metadata, modules, exercises.

## metadata
- title: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)
- description: SEO-–æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤)
- version: "1.0"
- validation_prompt: —Ä–æ–ª—å –ò–ò –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)

## modules
–ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤:
- id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, "m1")
- title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è
- description: 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —á—ë–º –º–æ–¥—É–ª—å
- order: —á–∏—Å–ª–æ (1, 2, 3...)

## exercises
–ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤:
- id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, "e1")
- module_id: —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥—É–ª—å
- prompt: –∫–æ–Ω—Ç–µ–∫—Å—Ç + –≤–æ–ø—Ä–æ—Å (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- expected_answer: –∫–æ—Ä–æ—Ç–∫–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (3‚Äì8 —Å–ª–æ–≤)
- feedback_on_error: —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏, –±–µ–∑ –ø–æ—Ö–≤–∞–ª—ã
- difficulty: 1‚Äì4

## –í–∞–∂–Ω–æ!
- –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.
- expected_answer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–µ–π—Å–∞.
- feedback_on_error –ù–ï –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "–í–µ—Ä–Ω–æ", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–û—Ç–ª–∏—á–Ω–æ".
- –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
`;
    }
}
